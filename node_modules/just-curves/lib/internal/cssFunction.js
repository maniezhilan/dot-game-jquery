Object.defineProperty(exports, "__esModule", { value: true });
var cssEasings_1 = require("./cssEasings");
var steps_1 = require("./steps");
var cubicBezier_1 = require("./cubicBezier");
var camelCaseRegex = /([a-z])[- ]([a-z])/ig;
var cssFunctionRegex = /^([a-z-]+)\(([^\)]+)\)$/i;
var cssEasings = { ease: cssEasings_1.ease, easeIn: cssEasings_1.easeIn, easeOut: cssEasings_1.easeOut, easeInOut: cssEasings_1.easeInOut, stepStart: cssEasings_1.stepStart, stepEnd: cssEasings_1.stepEnd, linear: cssEasings_1.linear };
var camelCaseMatcher = function (match, p1, p2) { return p1 + p2.toUpperCase(); };
var toCamelCase = function (value) { return typeof value === 'string'
    ? value.replace(camelCaseRegex, camelCaseMatcher) : ''; };
var find = function (nameOrCssFunction) {
    // search for a compatible known easing
    var easingName = toCamelCase(nameOrCssFunction);
    var easing = cssEasings[easingName] || nameOrCssFunction;
    var matches = cssFunctionRegex.exec(easing);
    if (!matches) {
        throw new Error('css parse error');
    }
    return [matches[1]].concat(matches[2].split(','));
};
exports.cssFunction = function (easingString) {
    var p = find(easingString);
    var fnName = p[0];
    if (fnName === 'steps') {
        return steps_1.steps(+p[1], p[2]);
    }
    if (fnName === 'cubic-bezier') {
        return cubicBezier_1.cubicBezier(+p[1], +p[2], +p[3], +p[4]);
    }
    throw new Error('css parse error');
};
