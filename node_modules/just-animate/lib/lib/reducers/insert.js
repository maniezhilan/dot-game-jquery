Object.defineProperty(exports, "__esModule", { value: true });
var references_1 = require("../core/references");
var constants_1 = require("../utils/constants");
var lists_1 = require("../utils/lists");
var math_1 = require("../utils/math");
var resolve_property_1 = require("../utils/resolve-property");
var inspect_1 = require("../utils/inspect");
var plugins_1 = require("../core/plugins");
var calc_configs_1 = require("./calc-configs");
var propKeyframeSort = lists_1.sortBy('time');
exports.insert = function (model, options, ctx) {
    lists_1.all(options, function (opts) {
        if (opts.to === constants_1._) {
            throw new Error('missing duration');
        }
        opts = references_1.replaceWithRefs(model.refs, opts, true);
        lists_1.all(opts.targets, function (target, i, ilen) {
            var config = addPropertyKeyframes(model, target, i, ilen, opts);
            ctx.dirty(config);
        });
    });
    calc_configs_1.calculateConfigs(model);
    ctx.trigger(constants_1.CONFIG);
};
function addPropertyKeyframes(model, target, index, ilen, opts) {
    var defaultEasing = 'ease';
    var delay = resolve_property_1.resolveProperty(opts.delay, target, index, ilen) || 0;
    var config = lists_1.find(model.configs, function (c) { return c.target === target; }) ||
        lists_1.push(model.configs, {
            from: math_1.max(opts.from + delay, 0),
            to: math_1.max(opts.to + delay, 0),
            easing: opts.easing || defaultEasing,
            duration: opts.to - opts.from,
            endDelay: resolve_property_1.resolveProperty(opts.endDelay, target, index, ilen) || 0,
            stagger: opts.stagger || 0,
            target: target,
            targetLength: ilen,
            propNames: [],
            keyframes: []
        });
    var staggerMs = (opts.stagger && opts.stagger * (index + 1)) || 0;
    var delayMs = resolve_property_1.resolveProperty(opts.delay, config, index, config.targetLength) || 0;
    var from = math_1.max(staggerMs + delayMs + opts.from, 0);
    var duration = opts.to - opts.from;
    var easing = opts.easing || defaultEasing;
    for (var pluginName in plugins_1.plugins) {
        if (inspect_1.isOwner(opts, pluginName)) {
            var props = opts[pluginName];
            for (var name in props) {
                var propVal = props[name];
                if (inspect_1.isOwner(props, name) && inspect_1.isDefined(propVal)) {
                    addProperty(config, pluginName, index, name, propVal, duration, from, easing);
                }
            }
        }
    }
    config.keyframes.sort(propKeyframeSort);
    return config;
}
function addProperty(config, plugin, index, name, val, duration, from, defaultEasing) {
    var defaultInterpolator;
    var values;
    var isValueObject = !inspect_1.isArrayLike(val) && inspect_1.isObject(val);
    if (isValueObject) {
        var objVal = val;
        if (objVal.easing) {
            defaultEasing = objVal.easing;
        }
        if (objVal.interpolate) {
            defaultInterpolator = objVal.interpolate;
        }
        values = lists_1.list(objVal.value);
    }
    else {
        values = lists_1.list(val);
    }
    var keyframes = values.map(function (v, i, vals) {
        var valOrObj = resolve_property_1.resolveProperty(v, config.target, index, config.targetLength);
        var valObj = valOrObj;
        var isObj2 = inspect_1.isObject(valOrObj);
        var value = isObj2 ? valObj.value : valOrObj;
        var offset = isObj2 && inspect_1.isNumber(valObj.offset)
            ?
                valObj.offset
            : i === vals.length - 1
                ?
                    1
                : i === 0
                    ?
                        0
                    : constants_1._;
        var interpolate = (valObj && valObj.interpolate) || defaultInterpolator;
        var easing = (valObj && valObj.easing) || defaultEasing;
        return { offset: offset, value: value, easing: easing, interpolate: interpolate };
    });
    inferOffsets(keyframes);
    lists_1.all(keyframes, function (keyframe) {
        var offset = keyframe.offset, value = keyframe.value;
        var time = math_1.flr(duration * offset + from);
        var frame = lists_1.find(config.keyframes, function (k) { return k.prop === name && k.time === time; }) ||
            lists_1.push(config.keyframes, {
                plugin: plugin,
                easing: keyframe.easing,
                index: index,
                prop: name,
                time: time,
                value: value,
                interpolate: keyframe.interpolate
            });
        frame.value = value;
    });
    lists_1.find(config.keyframes, function (k) { return k.prop === name && k.time === from; }) ||
        lists_1.push(config.keyframes, {
            plugin: plugin,
            easing: defaultEasing,
            index: index,
            prop: name,
            time: from,
            value: constants_1._,
            interpolate: defaultInterpolator
        });
    var to = from + duration;
    lists_1.find(config.keyframes, function (k) { return k.prop === name && k.time === to; }, true) ||
        lists_1.push(config.keyframes, {
            plugin: plugin,
            easing: defaultEasing,
            index: index,
            prop: name,
            time: to,
            value: constants_1._,
            interpolate: defaultInterpolator
        });
    lists_1.pushDistinct(config.propNames, name);
}
function inferOffsets(keyframes) {
    if (!keyframes.length) {
        return;
    }
    var first = lists_1.find(keyframes, function (k) { return k.offset === 0; }) || keyframes[0];
    if (!inspect_1.isDefined(first.offset)) {
        first.offset = 0;
    }
    var last = lists_1.find(keyframes, function (k) { return k.offset === 1; }, true) || keyframes[keyframes.length - 1];
    if (keyframes.length > 1 && !inspect_1.isDefined(last.offset)) {
        last.offset = 1;
    }
    for (var i = 1, ilen = keyframes.length; i < ilen; i++) {
        var target = keyframes[i];
        if (!inspect_1.isDefined(target.offset)) {
            for (var j = i + 1; j < ilen; j++) {
                var endTime = keyframes[j].offset;
                if (inspect_1.isDefined(endTime)) {
                    var startTime = keyframes[i - 1].offset;
                    var timeDelta = endTime - startTime;
                    var deltaLength = j - i + 1;
                    for (var k = 1; k < deltaLength; k++) {
                        keyframes[k - 1 + i].offset = k / j * timeDelta + startTime;
                    }
                    i = j;
                    break;
                }
            }
        }
    }
}
