Object.defineProperty(exports, "__esModule", { value: true });
var constants_1 = require("./utils/constants");
var actions_1 = require("./actions");
var index_1 = require("./reducers/index");
var lists_1 = require("./utils/lists");
var calc_configs_1 = require("./reducers/calc-configs");
var rebuild_1 = require("./reducers/rebuild");
var stateSubs = [];
var stores = {};
var reducers = (_a = {},
    _a[actions_1.APPEND] = index_1.append,
    _a[actions_1.CANCEL] = index_1.cancel,
    _a[actions_1.DESTROY] = index_1.destroy,
    _a[actions_1.FINISH] = index_1.finish,
    _a[actions_1.INSERT] = index_1.insert,
    _a[actions_1.PAUSE] = index_1.pause,
    _a[actions_1.PLAY] = index_1.play,
    _a[actions_1.REVERSE] = index_1.reverse,
    _a[actions_1.SET] = index_1.set,
    _a[actions_1.TICK] = index_1.tick,
    _a[actions_1.UPDATE] = index_1.update,
    _a[actions_1.UPDATE_RATE] = index_1.updateRate,
    _a[actions_1.UPDATE_TIME] = index_1.updateTime,
    _a);
function createInitial(opts) {
    var refs = {};
    if (opts.references) {
        for (var name in opts.references) {
            refs['@' + name] = opts.references[name];
        }
    }
    var newModel = {
        configs: [],
        cursor: 0,
        duration: 0,
        id: opts.id,
        players: constants_1._,
        rate: 1,
        refs: refs,
        repeat: constants_1._,
        round: constants_1._,
        state: constants_1.S_INACTIVE,
        time: constants_1._,
        yoyo: false
    };
    return newModel;
}
function getState(id) {
    var model = stores[id];
    if (!model) {
        throw new Error('not found');
    }
    return model.state;
}
exports.getState = getState;
function addState(opts) {
    stores[opts.id] = {
        state: createInitial(opts),
        subs: {}
    };
}
exports.addState = addState;
function on(id, eventName, listener) {
    var store = stores[id];
    if (store) {
        var subs = (store.subs[eventName] = store.subs[eventName] || []);
        lists_1.pushDistinct(subs, listener);
    }
}
exports.on = on;
function off(id, eventName, listener) {
    var store = stores[id];
    if (store) {
        lists_1.remove(store.subs[eventName], listener);
    }
}
exports.off = off;
function dispatch(action, id, data) {
    var fn = reducers[action];
    var store = stores[id];
    if (!fn || !store) {
        throw new Error('not found');
    }
    var ctx = {
        events: [],
        needUpdate: [],
        trigger: trigger,
        dirty: dirty
    };
    var model = store.state;
    fn(model, data, ctx);
    lists_1.all(ctx.events, function (evt) {
        var subs = store.subs[evt];
        if (subs) {
            lists_1.all(subs, function (sub) {
                sub(model.time);
            });
        }
    });
    if (ctx.destroyed) {
        delete stores[id];
    }
    else if (ctx.needUpdate.length) {
        if (model.state !== constants_1.S_INACTIVE) {
            rebuild_1.rebuild(model, ctx);
        }
        else {
            calc_configs_1.calculateConfigs(model);
        }
        lists_1.all(stateSubs, function (sub) {
            sub(store);
        });
    }
}
exports.dispatch = dispatch;
function trigger(eventName) {
    lists_1.pushDistinct(this.events, eventName);
}
function dirty(config) {
    lists_1.pushDistinct(this.needUpdate, config);
}
if (typeof window !== 'undefined') {
    ;
    window.just_devtools = {
        dispatch: dispatch,
        subscribe: function (fn) {
            lists_1.pushDistinct(stateSubs, fn);
        },
        unsubscribe: function (fn) {
            lists_1.remove(stateSubs, fn);
        }
    };
}
var _a;
