Object.defineProperty(exports, "__esModule", { value: true });
var uuid_1 = require("./utils/uuid");
var lists_1 = require("./utils/lists");
var actions_1 = require("./actions");
var store_1 = require("./store");
var timelineProto = {
    get state() {
        return store_1.getState(this.id).state;
    },
    get duration() {
        return store_1.getState(this.id).duration;
    },
    get currentTime() {
        return store_1.getState(this.id).time;
    },
    set currentTime(time) {
        store_1.dispatch(actions_1.UPDATE_TIME, this.id, time);
    },
    get playbackRate() {
        return store_1.getState(this.id).rate;
    },
    set playbackRate(rate) {
        store_1.dispatch(actions_1.UPDATE_RATE, this.id, rate);
    },
    add: function (opts) {
        store_1.dispatch(actions_1.APPEND, this.id, opts);
        return this;
    },
    animate: function (opts) {
        store_1.dispatch(actions_1.APPEND, this.id, opts);
        return this;
    },
    fromTo: function (from, to, options) {
        lists_1.all(options, function (options2) {
            options2.to = to;
            options2.from = from;
        });
        store_1.dispatch(actions_1.INSERT, this.id, options);
        return this;
    },
    cancel: function () {
        store_1.dispatch(actions_1.CANCEL, this.id);
        return this;
    },
    destroy: function () {
        store_1.dispatch(actions_1.DESTROY, this.id);
    },
    finish: function () {
        store_1.dispatch(actions_1.FINISH, this.id);
        return this;
    },
    on: function (name, fn) {
        store_1.on(this.id, name, fn);
        return this;
    },
    once: function (eventName, listener) {
        var self = this;
        self.on(eventName, function s(time) {
            self.off(eventName, s);
            listener(time);
        });
        return self;
    },
    off: function (name, fn) {
        store_1.off(this.id, name, fn);
        return this;
    },
    pause: function () {
        store_1.dispatch(actions_1.PAUSE, this.id);
        return this;
    },
    play: function (options) {
        store_1.dispatch(actions_1.PLAY, this.id, options);
        return this;
    },
    reverse: function () {
        store_1.dispatch(actions_1.REVERSE, this.id);
        return this;
    },
    seek: function (time) {
        store_1.dispatch(actions_1.UPDATE_TIME, this.id, time);
        return this;
    },
    sequence: function (seqOptions) {
        var _this = this;
        lists_1.all(seqOptions, function (opt) { return store_1.dispatch(actions_1.APPEND, _this.id, opt); });
        return this;
    },
    set: function (opts) {
        store_1.dispatch(actions_1.SET, this.id, opts);
        return this;
    }
};
function timeline(opts) {
    var t1 = Object.create(timelineProto);
    opts = opts || {};
    opts.id = opts.id || uuid_1.uuid();
    t1.id = opts.id;
    store_1.addState(opts);
    return t1;
}
exports.timeline = timeline;
