Object.defineProperty(exports, "__esModule", { value: true });
var inspect_1 = require("./inspect");
var constants_1 = require("./constants");
function includes(items, item) {
    return getIndex(items, item) !== -1;
}
exports.includes = includes;
function getIndex(items, item) {
    return items.indexOf(item);
}
exports.getIndex = getIndex;
function find(indexed, predicate, reverse) {
    var ilen = indexed && indexed.length;
    if (!ilen) {
        return constants_1._;
    }
    if (predicate === constants_1._) {
        return indexed[reverse ? ilen - 1 : 0];
    }
    if (reverse) {
        for (var i = ilen - 1; i > -1; i--) {
            if (predicate(indexed[i])) {
                return indexed[i];
            }
        }
    }
    else {
        for (var i = 0; i < ilen; i++) {
            if (predicate(indexed[i])) {
                return indexed[i];
            }
        }
    }
    return constants_1._;
}
exports.find = find;
function indexOf(items, predicate) {
    for (var i = 0, ilen = items.length; i < ilen; i++) {
        var item = items[i];
        if (predicate(item)) {
            return i;
        }
    }
    return -1;
}
exports.indexOf = indexOf;
function remove(items, item) {
    var index = items.indexOf(item);
    return index !== -1 ? items.splice(index, 1) : constants_1._;
}
exports.remove = remove;
function sortBy(fieldName) {
    return function (a, b) {
        var a1 = a[fieldName];
        var b1 = b[fieldName];
        return a1 < b1 ? -1 : a1 > b1 ? 1 : 0;
    };
}
exports.sortBy = sortBy;
function list(indexed) {
    return !inspect_1.isDefined(indexed) ? [] : inspect_1.isArrayLike(indexed) ? indexed : [indexed];
}
exports.list = list;
function push(indexed, item) {
    if (item !== constants_1._) {
        Array.prototype.push.call(indexed, item);
    }
    return item;
}
exports.push = push;
function pushDistinct(indexed, item) {
    if (!includes(indexed, item)) {
        push(indexed, item);
    }
    return item;
}
exports.pushDistinct = pushDistinct;
function mapFlatten(items, mapper) {
    var results = [];
    all(items, function (item) {
        var result = mapper(item);
        if (inspect_1.isArrayLike(result)) {
            all(result, function (item2) { return push(results, item2); });
        }
        else {
            push(results, result);
        }
    });
    return results;
}
exports.mapFlatten = mapFlatten;
function all(items, action) {
    var items2 = list(items);
    for (var i = 0, ilen = items2.length; i < ilen; i++) {
        action(items2[i], i, ilen);
    }
}
exports.all = all;
