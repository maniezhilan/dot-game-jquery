Object.defineProperty(exports, "__esModule", { value: true });
var plugins_1 = require("../core/plugins");
var references_1 = require("../core/references");
var constants_1 = require("../utils/constants");
var get_targets_1 = require("../utils/get-targets");
var lists_1 = require("../utils/lists");
var assign_1 = require("../utils/assign");
var resolve_property_1 = require("../utils/resolve-property");
var offsetSorter = lists_1.sortBy('offset');
function getEffects(model) {
    return lists_1.mapFlatten(model.configs, function (c) {
        return toEffects(references_1.resolveRefs(model.refs, c, true));
    });
}
exports.getEffects = getEffects;
function toEffects(config) {
    var keyframes = config.keyframes;
    var from = config.from;
    var to = config.to;
    var stagger = config.stagger || 0;
    var duration = config.duration;
    var result = [];
    lists_1.all(get_targets_1.getTargets(config.target), function (target, index, targetLength) {
        var effects = {};
        var propToPlugin = {};
        lists_1.all(keyframes, function (p) {
            var effects3 = effects[p.prop] || (effects[p.prop] = []);
            var offset = (p.time - from) / (duration || 1);
            var easing = p.easing;
            var interpolate = p.interpolate;
            var value = resolve_property_1.resolveProperty(p.value, target, p.index, targetLength);
            propToPlugin[p.prop] = p.plugin;
            var effect2 = lists_1.find(effects3, function (e) { return e.offset === offset; }) ||
                lists_1.push(effects3, {
                    easing: easing,
                    offset: offset,
                    value: value,
                    interpolate: interpolate
                });
            effect2.easing = easing;
            effect2.value = value;
            effect2.interpolate = interpolate;
        });
        for (var pluginName in plugins_1.plugins) {
            var plugin2 = plugins_1.plugins[pluginName];
            if (plugin2.onWillAnimate && config.keyframes.some(function (c) { return c.plugin === pluginName; })) {
                var targetConfig2 = assign_1.assign(config, { target: target });
                plugin2.onWillAnimate(targetConfig2, effects, propToPlugin);
            }
        }
        for (var prop in effects) {
            var effects2 = effects[prop];
            var pluginName2 = propToPlugin[prop];
            var plugin = plugins_1.plugins[pluginName2];
            if (effects2) {
                effects2.sort(offsetSorter);
                ensureFirstFrame(config, effects2, target, plugin, prop);
                fillValues(effects2);
                fillInterpolators(effects2);
                ensureLastFrame(config, effects2);
                lists_1.push(result, {
                    plugin: propToPlugin[prop],
                    target: target,
                    prop: prop,
                    from: from + (stagger ? stagger * index : 0),
                    to: to + (stagger ? stagger * index : 0),
                    keyframes: effects2
                });
            }
        }
    });
    return result;
}
exports.toEffects = toEffects;
function fillValues(items) {
    var lastValue;
    lists_1.all(items, function (item) {
        if (item.value !== constants_1._) {
            lastValue = item.value;
        }
        else {
            item.value = lastValue;
        }
    });
}
function fillInterpolators(items) {
    var lastInterpolator;
    for (var y = items.length - 1; y > -1; y--) {
        var item2 = items[y];
        if (item2.interpolate !== constants_1._) {
            lastInterpolator = item2.interpolate;
        }
        else {
            item2.interpolate = lastInterpolator;
        }
    }
}
function ensureFirstFrame(config, items, target, plugin, prop) {
    var firstFrame = lists_1.find(items, function (c) { return c.offset === 0; });
    if (firstFrame === constants_1._ || firstFrame.value === constants_1._) {
        var value2 = plugin.getValue(target, prop);
        if (firstFrame === constants_1._) {
            items.splice(0, 0, {
                offset: 0,
                value: value2,
                easing: config.easing,
                interpolate: constants_1._
            });
        }
        else {
            firstFrame.value = value2;
            firstFrame.easing = config.easing;
            firstFrame.interpolate = constants_1._;
        }
    }
}
function ensureLastFrame(config, items) {
    var lastFrame = lists_1.find(items, function (c) { return c.offset === 1; }, true);
    if (lastFrame === constants_1._ || lastFrame.value === constants_1._) {
        var value3 = items[items.length - 1].value;
        if (lastFrame === constants_1._) {
            lists_1.push(items, {
                offset: 1,
                value: value3,
                easing: config.easing,
                interpolate: constants_1._
            });
        }
        else {
            lastFrame.value = value3;
            lastFrame.easing = lastFrame.easing || config.easing;
        }
    }
}
