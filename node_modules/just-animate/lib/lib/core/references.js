Object.defineProperty(exports, "__esModule", { value: true });
var inspect_1 = require("../utils/inspect");
var lists_1 = require("../utils/lists");
var refId = 0;
var objNameExp = /\[object ([a-z]+)\]/i;
function getName(target) {
    var name = target.id || target.name;
    if (!name) {
        name = Object.prototype.toString.call(target);
        var matches = objNameExp.exec(name);
        if (matches) {
            name = matches[1];
        }
    }
    return '@' + name + '_' + ++refId;
}
function assignRef(refs, target) {
    for (var ref in refs) {
        if (refs[ref] === target) {
            return ref;
        }
    }
    var refName = getName(target);
    refs[refName] = target;
    return refName;
}
function replaceWithRefs(refs, target, recurseObjects) {
    if (!inspect_1.isDefined(target) || inspect_1.isString(target) || inspect_1.isNumber(target)) {
        return target;
    }
    if (inspect_1.isArrayLike(target)) {
        return lists_1.mapFlatten(target, function (t) { return replaceWithRefs(refs, t, recurseObjects); });
    }
    if (inspect_1.isFunction(target)) {
        return assignRef(refs, target);
    }
    if (recurseObjects) {
        for (var name in target) {
            if (inspect_1.isOwner(target, name)) {
                target[name] = replaceWithRefs(refs, target[name], recurseObjects && name !== 'targets');
            }
        }
        return target;
    }
    return assignRef(refs, target);
}
exports.replaceWithRefs = replaceWithRefs;
function resolveRefs(refs, value, recurseObjects) {
    if (!inspect_1.isDefined(value) || inspect_1.isNumber(value) || inspect_1.isFunction(value)) {
        return value;
    }
    if (inspect_1.isString(value)) {
        var str = value;
        return inspect_1.isOwner(refs, str) && str.charAt(0) === '@' ? refs[str] : str;
    }
    if (inspect_1.isArrayLike(value)) {
        var results_1 = [];
        lists_1.all(value, function (item) { return lists_1.push(results_1, resolveRefs(refs, item, recurseObjects)); });
        return results_1;
    }
    if (!recurseObjects || inspect_1.isDOM(value)) {
        return value;
    }
    var obj2 = {};
    for (var name in value) {
        if (inspect_1.isOwner(value, name)) {
            var value2 = value[name];
            obj2[name] = recurseObjects ? resolveRefs(refs, value2, name !== 'targets') : value2;
        }
    }
    return obj2;
}
exports.resolveRefs = resolveRefs;
