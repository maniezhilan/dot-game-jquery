export interface IList<T> {
    [key: number]: T;
    length: number;
}
export declare function includes<T>(items: T[], item: T): boolean;
export declare function getIndex<T>(items: T[], item: T): number;
export declare function find<T>(indexed: IList<T>, predicate?: {
    (t: T): boolean;
}, reverse?: boolean): T;
export declare function indexOf<T>(items: T[], predicate: {
    (t: T): boolean;
}): number;
export declare function remove<T>(items: T[], item: T): T[];
export declare function sortBy<T>(fieldName: keyof T): (a: T, b: T) => 0 | 1 | -1;
export declare function list<T>(indexed: IList<T> | T): T[];
export declare function push<T>(indexed: T[], item: T): T;
export declare function pushDistinct<T>(indexed: T[], item: T): T;
export declare function mapFlatten<TInput, TOutput>(items: TInput[], mapper: (input: TInput) => TOutput | TOutput[]): TOutput[];
export declare type Action<T1> = (input: T1, index: number, len: number) => void;
export declare function all<T1>(items: T1 | IList<T1>, action: Action<T1>): void;
